% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_thin.R
\name{data_thin}
\alias{data_thin}
\title{Data thining function}
\usage{
data_thin(x, cutoff = 1000, fun = "sum", n = 2000)
}
\arguments{
\item{x}{A sf object resulting from previous steps in the ClimateCastR - flow}

\item{cutoff}{A numeric value defining the distance cutoff for grouping points}

\item{fun}{A function to apply to the grouped points. Default is 'sum'}

\item{n}{An integer defining the number of points to process at a time. Default is 2000}
}
\value{
A sf object with the same columns as the input data, but with fewer rows
}
\description{
A function to reduce the number of data points in a data frame by proximity.
The function groups points that are close to each other. The group is then
represented by the mean of the points in the group. Closeness is defined by a
spatial cutoff distance.
}
\details{
The cutoff is set to 1000 meters by default. This means that points that are
within 1000 meters of each other will be grouped together. The cutoff can be
changed by setting the cutoff argument to a different value.

The fun argument can be any function that takes a numeric vector as input and
returns a single numeric value. The default is the sum function. Other options
are median, min, max & mean.

The n argument is used to split the data into chunks. This is useful when the
data \emph{defined by a taxonkey and year_cat} has more than n points. The default is 2000.
When the data has less than n points, the function will process all the data at once.
Spatial groups are calculated within a chunk. The function will then merge the
chunks and calculate the mean of the points in each group.
Increasing the n argument will slow down the function, but may thin the data more.
Decreasing the n argument will speed up the function, but may thin the data less.
}
\examples{
\dontrun{
# get data using get_data functions or as a result of the data_prep function.
taxon_key <- c(2865504, 5274858)
df<-get_gbif_data(taxon_key)

# thin the data using default values
df_thinned <- data_thin(df)

# thin the data using a different cutoff value
df_thinned <- data_thin(df, cutoff = 500)

# thin the data using a different function
df_thinned <- data_thin(df, fun = 'mean')

# thin the data using a different n value
df_thinned <- data_thin(df, n = 1000)
}

}
